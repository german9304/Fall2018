Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.3.222 Build 20180410

Compiler options: -std=c99 -O2 -Wall -W -Werror -march=sandybridge -qopt-report=5 -qopt-report-phase=vec -o mmvec

Begin optimization report for: main()

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(57,5) inlined into mm.c(138,6)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(58,9) inlined into mm.c(138,6)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(59,40) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(62,5) inlined into mm.c(138,6)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(63,9) inlined into mm.c(138,6)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(64,38) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(96,5) inlined into mm.c(140,6)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(97,8) inlined into mm.c(140,6)
      remark #15527: loop was not vectorized: function call to scanf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(98,9) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(101,5) inlined into mm.c(140,6)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(102,8) inlined into mm.c(140,6)
      remark #15527: loop was not vectorized: function call to scanf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(103,9) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(12,4) inlined into mm.c(145,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(145,5)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(145,5)
      remark #15388: vectorization support: reference t_matrix[m][l] has aligned access   [ mm.c(15,12) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <matrix_2[l][m]>, stride is unknown to compiler   [ mm.c(15,37) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.556
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 1.690 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(145,5)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mm.c(35,5) inlined into mm.c(145,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(37,8) inlined into mm.c(145,5)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm.c(40,9) inlined into mm.c(145,5)
         remark #15388: vectorization support: reference matrix_1[m][n] has aligned access   [ mm.c(41,37) ]
         remark #15388: vectorization support: reference t_matrix[m][n] has aligned access   [ mm.c(41,54) ]
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 0.870 
         remark #15478: estimated potential speedup: 7.490 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mm.c(40,9) inlined into mm.c(145,5)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference matrix_1[m][n] has aligned access   [ mm.c(41,37) ]
         remark #15388: vectorization support: reference t_matrix[m][n] has aligned access   [ mm.c(41,54) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.429
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mm.c(40,9) inlined into mm.c(145,5)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at mm.c(110,5) inlined into mm.c(149,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(112,8) inlined into mm.c(149,5)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(113,10) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: transpose_matrix(int, float (*__restrict__)[*], float (*__restrict__)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(12,4)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(13,7)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mm.c(13,7)
      remark #15388: vectorization support: reference transpose_matrix[m][l] has aligned access   [ mm.c(15,12) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <matrix_2[l][m]>, stride is unknown to compiler   [ mm.c(15,37) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.556
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 1.690 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(13,7)
   <Remainder loop for vectorization>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: multiply(int, float (*__restrict__)[*], float (*__restrict__)[*], float (*__restrict__)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(12,4) inlined into mm.c(26,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(26,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(26,3)
      remark #15388: vectorization support: reference t_matrix[m][l] has aligned access   [ mm.c(15,12) ]
      remark #15328: vectorization support: non-unit strided load was emulated for the variable <matrix_2[l][m]>, stride is unknown to compiler   [ mm.c(15,37) ]
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.556
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15452: unmasked strided loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 4 
      remark #15477: vector cost: 2.250 
      remark #15478: estimated potential speedup: 1.690 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at mm.c(13,7) inlined into mm.c(26,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mm.c(35,5)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mm.c(37,8)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mm.c(40,9)
         remark #15388: vectorization support: reference matrix_1[m][n] has aligned access   [ mm.c(41,37) ]
         remark #15388: vectorization support: reference t_matrix[m][n] has aligned access   [ mm.c(41,54) ]
         remark #15305: vectorization support: vector length 8
         remark #15399: vectorization support: unroll factor set to 2
         remark #15300: LOOP WAS VECTORIZED
         remark #15448: unmasked aligned unit stride loads: 2 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 9 
         remark #15477: vector cost: 0.870 
         remark #15478: estimated potential speedup: 7.490 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at mm.c(40,9)
      <Remainder loop for vectorization>
         remark #15388: vectorization support: reference matrix_1[m][n] has aligned access   [ mm.c(41,37) ]
         remark #15388: vectorization support: reference t_matrix[m][n] has aligned access   [ mm.c(41,54) ]
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.429
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mm.c(40,9)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: generate_random_matrices(int, float (*__restrict__)[*], float (*__restrict__)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(57,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(58,9)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(59,40) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(62,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(63,9)
      remark #15527: loop was not vectorized: function call to rand(void) cannot be vectorized   [ mm.c(64,38) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: generate_matrices(int, float (*__restrict__)[*], float (*__restrict__)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(96,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(97,8)
      remark #15527: loop was not vectorized: function call to scanf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(98,9) ]
   LOOP END
LOOP END

LOOP BEGIN at mm.c(101,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(102,8)
      remark #15527: loop was not vectorized: function call to scanf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(103,9) ]
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: print_matrix(int, float (*)[*])

    Report from: Vector optimizations [vec]


LOOP BEGIN at mm.c(110,5)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mm.c(112,8)
      remark #15382: vectorization support: call to function printf(const char *__restrict__, ...) cannot be vectorized   [ mm.c(113,10) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
   LOOP END
LOOP END
===========================================================================
